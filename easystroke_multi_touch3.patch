diff -Naur easystroke-0.5.5.1/actiondb.cc easystroke-0.5.5.1-3mod/actiondb.cc
--- easystroke-0.5.5.1/actiondb.cc	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/actiondb.cc	2011-11-16 22:53:54.000000000 +0100
@@ -319,6 +319,7 @@
 			if (match < 0)
 				continue;
 			RStrokeInfo si = get_info(i->first);
+			if (verbosity >=2) printf("Action compared: %s\n", si->name.c_str());
 			r->r.insert(pair<double, pair<std::string, RStroke> >
 					(score, pair<std::string, RStroke>(si->name, *j)));
 			if (score > r->score) {
diff -Naur easystroke-0.5.5.1/composite.cc easystroke-0.5.5.1-3mod/composite.cc
--- easystroke-0.5.5.1/composite.cc	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/composite.cc	2011-11-16 00:30:04.000000000 +0100
@@ -19,11 +19,12 @@
 #include <glibmm/i18n.h>
 
 double red, green, blue, alpha, width;
-std::list<Trace::Point> points;
+// std::list<Trace::Point> points;
 
-Popup::Popup(int x1, int y1, int x2, int y2) : Gtk::Window(Gtk::WINDOW_POPUP), rect(x1, y1, x2-x1, y2-y1) {
+Popup::Popup(Composite *comp, int x1, int y1, int x2, int y2) : Gtk::Window(Gtk::WINDOW_POPUP), rect(x1, y1, x2-x1, y2-y1) {
 	if (!is_composited())
 		throw std::runtime_error(_("'composite' not available"));
+	composite = comp;
 
 	Glib::RefPtr<Gdk::Colormap> colormap = get_screen()->get_rgba_colormap();
 	if (colormap)
@@ -55,7 +56,7 @@
 	for (int i = 0; i < num_x; i++) {
 		pieces[i] = new Popup*[num_y];
 		for (int j = 0; j < num_y; j++)
-			pieces[i][j] = new Popup(i*N,j*N,MIN((i+1)*N,w),MIN((j+1)*N,h));
+			pieces[i][j] = new Popup(this,i*N,j*N,MIN((i+1)*N,w),MIN((j+1)*N,h));
 
 	}
 }
@@ -91,11 +92,11 @@
 }
 
 void Popup::draw_line(Cairo::RefPtr<Cairo::Context> ctx) {
-	if (!points.size())
+	if (!composite->points.size())
 		return;
-	std::list<Trace::Point>::iterator i = points.begin();
+	std::list<Trace::Point>::iterator i = composite->points.begin();
 	ctx->move_to (i->x, i->y);
-	for (; i != points.end(); i++)
+	for (; i != composite->points.end(); i++)
 		ctx->line_to (i->x, i->y);
 	ctx->set_source_rgba((red+0.5)/2.0, (green+0.5)/2.0, (blue+0.5)/2.0, alpha/2.0);
 	ctx->set_line_width(width+1.0);
diff -Naur easystroke-0.5.5.1/composite.h easystroke-0.5.5.1-3mod/composite.h
--- easystroke-0.5.5.1/composite.h	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/composite.h	2011-11-16 00:30:37.000000000 +0100
@@ -20,12 +20,15 @@
 #include "main.h"
 #include <list>
 
+class Composite;
+
 class Popup : public Gtk::Window {
 	bool on_expose(GdkEventExpose* event);
 	void draw_line(Cairo::RefPtr<Cairo::Context> ctx);
 	Gdk::Rectangle rect;
+	Composite *composite;
 public:
-	Popup(int x1, int y1, int x2, int y2);
+	Popup(Composite *comp,int x1, int y1, int x2, int y2);
 	void invalidate(int x1, int y1, int x2, int y2);
 };
 
@@ -36,6 +39,7 @@
 	virtual void start_();
 	virtual void end_();
 public:
+	std::list<Trace::Point> points;
 	Composite();
 	virtual ~Composite();
 };
diff -Naur easystroke-0.5.5.1/debug.mk easystroke-0.5.5.1-3mod/debug.mk
--- easystroke-0.5.5.1/debug.mk	1970-01-01 01:00:00.000000000 +0100
+++ easystroke-0.5.5.1-3mod/debug.mk	2011-11-12 00:33:07.000000000 +0100
@@ -0,0 +1,3 @@
+DFLAGS   = -ggdb #-pg
+OFLAGS   = 
+#CXX      = ccache g++
diff -Naur easystroke-0.5.5.1/debug.mk.ex easystroke-0.5.5.1-3mod/debug.mk.ex
--- easystroke-0.5.5.1/debug.mk.ex	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/debug.mk.ex	1970-01-01 01:00:00.000000000 +0100
@@ -1,3 +0,0 @@
-DFLAGS   = -ggdb #-pg
-OFLAGS   = 
-CXX      = ccache g++
diff -Naur easystroke-0.5.5.1/gesture.cc easystroke-0.5.5.1-3mod/gesture.cc
--- easystroke-0.5.5.1/gesture.cc	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/gesture.cc	2011-11-17 23:46:53.000000000 +0100
@@ -28,16 +28,30 @@
 	return e;
 }
 
-Stroke::Stroke(PreStroke &ps, int trigger_, int button_, bool timeout_) : button(button_), timeout(timeout_) {
+Stroke::Stroke(PreStroke &ps, PreStroke &ps2, int trigger_, int button_, bool timeout_, int multi_finger_) : button(button_), timeout(timeout_), multi_finger(multi_finger_) {
 	trigger = (trigger_ == get_default_button()) ? 0 : trigger_;
 
+	stroke_t *s = NULL;
 	if (ps.valid()) {
-		stroke_t *s = stroke_alloc(ps.size());
+		s = stroke_alloc(ps.size());
 		for (std::vector<RTriple>::iterator i = ps.begin(); i != ps.end(); ++i)
 			stroke_add_point(s, (*i)->x, (*i)->y);
+	}
+	stroke_t *s2 = NULL;
+	if (ps2.valid()) {
+		s2 = stroke_alloc(ps2.size());
+		for (std::vector<RTriple>::iterator i = ps2.begin(); i != ps2.end(); ++i)
+			stroke_add_point(s2, (*i)->x, (*i)->y);
+	}
+	stroke_normalize(s,s2);
+	if (ps.valid()) {
 		stroke_finish(s);
 		stroke.reset(s, &stroke_free);
 	}
+	if (ps2.valid()) {
+		stroke_finish(s2);
+		stroke2.reset(s2, &stroke_free);
+	}
 }
 
 int Stroke::compare(RStroke a, RStroke b, double &score) {
@@ -48,6 +62,8 @@
 		return -1;
 	if (a->button != b->button)
 		return -1;
+	if (a->multi_finger != b->multi_finger)
+		return -1;
 	if (a->trigger != b->trigger) {
 		if (a->trigger && b->trigger)
 			return -1;
@@ -62,10 +78,84 @@
 		else
 			return -1;
 	}
-	double cost = stroke_compare(a->stroke.get(), b->stroke.get(), NULL, NULL);
+	double cost;
+	if (a->multi_finger != 2) {
+        	cost = stroke_compare(a->stroke.get(), b->stroke.get(), NULL, NULL);
+		if (verbosity >= 2) printf("compared cost=%g\n", cost);
+	} else {
+		double how_compatible_1_1 = stroke_how_compatible( a->stroke.get(), b->stroke.get() );
+		double how_compatible_2_2 = stroke_how_compatible( a->stroke2.get(), b->stroke2.get() );
+		double how_compatible_1_2 = stroke_how_compatible( a->stroke.get(), b->stroke2.get() );
+		double how_compatible_2_1 = stroke_how_compatible( a->stroke2.get(), b->stroke.get() );
+		double how_compatible_e = ( how_compatible_1_1 + how_compatible_2_2 ) / 2.0;
+		double how_compatible_r = ( how_compatible_1_2 + how_compatible_2_1 ) / 2.0;
+		double how_compatible;
+		bool compatible_e = (how_compatible_1_1 > 0.5 && how_compatible_2_2 > 0.5);
+		bool compatible_r = (how_compatible_1_2 > 0.5 && how_compatible_2_1 > 0.5);
+		stroke_t *stroke = NULL;
+		stroke_t *stroke2 = NULL;
+		if (! compatible_e && ! compatible_r) {
+			return -1;
+		} else if(compatible_e && ! compatible_r) {
+			stroke = a->stroke.get();
+			stroke2 = a->stroke2.get();
+			how_compatible = how_compatible_e;
+		} else if(! compatible_e && compatible_r) {
+			stroke = a->stroke2.get();
+			stroke2 = a->stroke.get();
+			how_compatible = how_compatible_r;
+		} else if( how_compatible_1_1 + how_compatible_2_2 >= how_compatible_1_2 + how_compatible_2_1) {
+			stroke = a->stroke.get();
+			stroke2 = a->stroke2.get();
+			how_compatible = how_compatible_e;
+		} else {
+			stroke = a->stroke2.get();
+			stroke2 = a->stroke.get();
+			how_compatible = how_compatible_r;
+		}
+		double compatible_factor;
+		double cost_1_1 = 0.0, cost_2_2 = 0.0;
+        	cost_1_1 = stroke_compare(stroke, b->stroke.get(), NULL, NULL);
+        	cost_2_2 = stroke_compare(stroke2, b->stroke2.get(), NULL, NULL);
+		compatible_factor = 2.0 / ( 1.1 - how_compatible );
+		cost = ( cost_1_1 + cost_2_2 ) / 2.0 * compatible_factor;
+		if (verbosity >= 2) printf("compared cost=%g cost1_1=%g cost2_2=%g fact=%g\n", cost, cost_1_1, cost_2_2, compatible_factor);
+/*
+		double diff_angle1 = stroke_radians_difference( stroke_orient_start(a->stroke.get(), a->stroke2.get()), stroke_orient_start(b->stroke.get(), b->stroke2.get()));
+		double diff_angle2 = stroke_radians_difference( stroke_orient_middle(a->stroke.get(), a->stroke2.get()), stroke_orient_middle(b->stroke.get(), b->stroke2.get()));
+		double diff_angle3 = stroke_radians_difference( stroke_orient_end(a->stroke.get(), a->stroke2.get()), stroke_orient_end(b->stroke.get(), b->stroke2.get()));
+		double diff_angles = diff_angle1 + diff_angle2 + diff_angle3;
+		double diff_dist1 = fabs(stroke_dist_start(a->stroke.get(), b->stroke.get()) - stroke_dist_start(a->stroke2.get(), b->stroke2.get()));
+		double diff_dist2 = fabs(stroke_dist_middle(a->stroke.get(), b->stroke.get()) - stroke_dist_middle(a->stroke2.get(), b->stroke2.get()));
+		double diff_dist3 = fabs(stroke_dist_end(a->stroke.get(), b->stroke.get()) - stroke_dist_end(a->stroke2.get(), b->stroke2.get()));
+		double diff_dist = diff_dist1 + diff_dist2 + diff_dist3;
+		double diff_dist1r = fabs(stroke_dist_start(a->stroke.get(), b->stroke2.get()) - stroke_dist_start(a->stroke2.get(), b->stroke.get()));
+		double diff_dist2r = fabs(stroke_dist_middle(a->stroke.get(), b->stroke2.get()) - stroke_dist_middle(a->stroke2.get(), b->stroke.get()));
+		double diff_dist3r = fabs(stroke_dist_end(a->stroke.get(), b->stroke2.get()) - stroke_dist_end(a->stroke2.get(), b->stroke.get()));
+		double diff_distr = diff_dist1r + diff_dist2r + diff_dist3r;
+		double cost_1 = 0.0, cost_2 = 0.0, cost_1_1 = 0.0, cost_1_2 = 0.0, cost_2_1 = 0.0, cost_2_2 = 0.0;
+		if (verbosity >= 2) printf("compared   dist=%g dist1=%g dist2=%g dist3=%g\n", diff_dist, diff_dist1, diff_dist2, diff_dist3);
+		if (verbosity >= 2) printf("compared r dist=%g dist1=%g dist2=%g dist3=%g\n", diff_distr, diff_dist1r, diff_dist2r, diff_dist3r);
+		if (diff_dist < diff_distr) {
+        		cost_1_1 = stroke_compare(a->stroke.get(), b->stroke.get(), NULL, NULL);
+        		cost_2_2 = stroke_compare(a->stroke2.get(), b->stroke2.get(), NULL, NULL);
+			cost = ( cost_1_1 + cost_2_2 ) / 2.0;
+			if (verbosity >= 2) printf("compared cost=%g cost1_1=%g cost2_2=%g\n", cost, cost_1_1, cost_2_2);
+			if (cost_1_1 > stroke_infinity || cost_2_2 > stroke_infinity) return -1;
+		} else {
+        		cost_1_2 = stroke_compare(a->stroke.get(), b->stroke2.get(), NULL, NULL);
+        		cost_2_1 = stroke_compare(a->stroke2.get(), b->stroke.get(), NULL, NULL);
+			cost = ( cost_1_2 + cost_2_1 ) / 2.0;
+			if (verbosity >= 2) printf("compared cost=%g cost1_2=%g cost2_1=%g\n", cost, cost_1_2, cost_2_1);
+			if (cost_1_2 > stroke_infinity || cost_2_1 > stroke_infinity) return -1;
+		}
+		if (verbosity >= 2) printf("compared angle=%g angle1=%g angle2=%g angle3=%g\n", diff_angles, diff_angle1, diff_angle2, diff_angle3);
+*/
+	}
 	if (cost >= stroke_infinity)
 		return -1;
 	score = MAX(1.0 - 2.5*cost, 0.0);
+		if (verbosity >= 2) printf("score=%g\n", score);
 	if (a->timeout)
 		return score > 0.85;
 	else
@@ -96,11 +186,12 @@
 
 RStroke Stroke::trefoil() {
 	PreStroke s;
+	PreStroke s2;
 	const int n = 40;
 	for (int i = 0; i<=n; i++) {
 		double phi = M_PI*(-4.0*i/n)-2.7;
 		double r = exp(1.0 + sin(6.0*M_PI*i/n)) + 2.0;
 		s.add(create_triple(r*cos(phi), r*sin(phi), i));
 	}
-	return Stroke::create(s, 0, 0, false);
+	return Stroke::create(s, s2, 0, 0, false, 1);
 }
diff -Naur easystroke-0.5.5.1/gesture.h easystroke-0.5.5.1-3mod/gesture.h
--- easystroke-0.5.5.1/gesture.h	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/gesture.h	2011-11-15 23:08:23.000000000 +0100
@@ -36,6 +36,8 @@
 
 int get_default_button();
 
+extern int verbosity;
+
 struct Triple {
 	float x;
 	float y;
@@ -76,7 +78,7 @@
 	};
 
 private:
-	Stroke(PreStroke &s, int trigger_, int button_, bool timeout_);
+	Stroke(PreStroke &s, PreStroke &s2, int trigger_, int button_, bool timeout_, int multi_finger_);
 
 	Glib::RefPtr<Gdk::Pixbuf> draw_(int size, double width = 2.0, bool inv = false) const;
 	mutable Glib::RefPtr<Gdk::Pixbuf> pb[2];
@@ -93,16 +95,24 @@
 		ar & button;
 		ar & trigger;
 		ar & timeout;
+		ar & multi_finger;
+		std::vector<Point> ps2;
+		for (unsigned int i = 0; i < size2(); i++)
+			ps2.push_back(points2(i));
+		ar & ps2;
 	}
 	template<class Archive> void load(Archive & ar, const unsigned int version) {
 		std::vector<Point> ps;
 		ar & ps;
+		stroke_t *s = NULL;
 		if (ps.size()) {
-			stroke_t *s = stroke_alloc(ps.size());
+			s = stroke_alloc(ps.size());
 			for (std::vector<Point>::iterator i = ps.begin(); i != ps.end(); ++i)
 				stroke_add_point(s, i->x, i->y);
-			stroke_finish(s);
-			stroke.reset(s, &stroke_free);
+			if (version<5) {
+				stroke_finish(s);
+				stroke.reset(s, &stroke_free);
+			}
 		}
 		if (version == 0) return;
 		ar & button;
@@ -113,17 +123,39 @@
 		if (version < 3)
 			return;
 		ar & timeout;
+		if (version < 5)
+			return;
+		ar & multi_finger;
+		std::vector<Point> ps2;
+		ar & ps2;
+		stroke_t *s2 = NULL;
+		if (ps2.size()) {
+			s2 = stroke_alloc(ps2.size());
+			for (std::vector<Point>::iterator i = ps2.begin(); i != ps2.end(); ++i)
+				stroke_add_point(s2, i->x, i->y);
+		}
+		stroke_normalize(s,s2);
+		if (ps.size()) {
+			stroke_finish(s);
+			stroke.reset(s, &stroke_free);
+		}
+		if (ps2.size()) {
+			stroke_finish(s2);
+			stroke2.reset(s2, &stroke_free);
+		}
 	}
 
 public:
 	int trigger;
 	int button;
 	bool timeout;
+	int multi_finger;
 	boost::shared_ptr<stroke_t> stroke;
+	boost::shared_ptr<stroke_t> stroke2;
 
-	Stroke() : trigger(0), button(0), timeout(false) {}
-	static RStroke create(PreStroke &s, int trigger_, int button_, bool timeout_) {
-		return RStroke(new Stroke(s, trigger_, button_, timeout_));
+	Stroke() : trigger(0), button(0), timeout(false), multi_finger(1) {}
+	static RStroke create(PreStroke &s, PreStroke &s2, int trigger_, int button_, bool timeout_, int multi_finger_) {
+		return RStroke(new Stroke(s, s2, trigger_, button_, timeout_, multi_finger_));
 	}
         Glib::RefPtr<Gdk::Pixbuf> draw(int size, double width = 2.0, bool inv = false) const;
 	void draw(Cairo::RefPtr<Cairo::Surface> surface, int x, int y, int w, int h, double width = 2.0, bool inv = false) const;
@@ -139,9 +171,13 @@
 	bool trivial() const { return size() == 0 && button == 0; }
 	Point points(int n) const { Point p; stroke_get_point(stroke.get(), n, &p.x, &p.y); return p; }
 	double time(int n) const { return stroke_get_time(stroke.get(), n); }
+	unsigned int size2() const { return stroke2 ? stroke_get_size(stroke2.get()) : 0; }
+	bool trivial2() const { return size2() == 0 && button == 0; }
+	Point points2(int n) const { Point p; stroke_get_point(stroke2.get(), n, &p.x, &p.y); return p; }
+	double time2(int n) const { return stroke_get_time(stroke2.get(), n); }
 	bool is_timeout() const { return timeout; }
 };
-BOOST_CLASS_VERSION(Stroke, 4)
+BOOST_CLASS_VERSION(Stroke, 5)
 BOOST_CLASS_VERSION(Stroke::Point, 1)
 
 class PreStroke : public std::vector<RTriple> {
diff -Naur easystroke-0.5.5.1/main.cc easystroke-0.5.5.1-3mod/main.cc
--- easystroke-0.5.5.1/main.cc	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/main.cc	2011-12-06 23:01:09.000000000 +0100
@@ -65,6 +65,7 @@
 
 static Window ping_window = 0;
 static boost::shared_ptr<Trace> trace;
+static boost::shared_ptr<Trace> trace2;
 static std::map<guint, guint> core_inv_map;
 
 class Handler;
@@ -816,14 +817,26 @@
 	}
 }
 
+#define MAX_PREV_LAST 20
+#define MAX_FINGERS 10
+
 class StrokeHandler : public Handler, public sigc::trackable {
 	guint button;
 	RPreStroke cur;
+	RPreStroke cur2;
 	bool is_gesture;
 	bool drawing;
 	RTriple last, orig;
+	RTriple last2, orig2;
 	bool use_timeout;
 	int init_timeout, final_timeout, radius;
+	int multi_finger_founds[ MAX_FINGERS ];
+
+	RTriple prev_lasts[MAX_PREV_LAST];
+	int multi_finger;
+	float min_dist_multi_finger;
+	int multi_finger_tested_times;
+	int num_prev_last;
 	struct Connection {
 		sigc::connection c;
 		double dist;
@@ -838,25 +851,55 @@
 
 	RStroke finish(guint b) {
 		trace->end();
+		trace2->end();
 		XFlush(dpy);
 		RPreStroke c = cur;
-		if (!is_gesture || grabber->is_instant(button))
+		RPreStroke c2 = cur2;
+		if (verbosity >= 2)
+			printf("finish: multi_finger=%d c.size=%d c2.size=%d\n",multi_finger,c->size(),c2->size());
+		if (!c->valid()) {
+			c = c2;
+			c2.reset(new PreStroke);
+		}
+		if (multi_finger == 2) {
+			if (!c2->valid()) {
+				c2.reset(new PreStroke);
+				multi_finger = 1;
+				if (verbosity >= 2)
+					printf("two finger goes to one\n");
+			}
+		}
+		if (!is_gesture || grabber->is_instant(button)) {
 			c.reset(new PreStroke);
-		if (b && prefs.advanced_ignore.get())
+			c2.reset(new PreStroke);
+			if (verbosity >= 2)
+				printf("reset stroke (1) is_gesture=%s is_instant=%s\n",
+					is_gesture ? "true" : "false",
+					grabber->is_instant(button) ? "true" : "false"
+					);
+		}
+		if (b && prefs.advanced_ignore.get()) {
 			c.reset(new PreStroke);
-		return Stroke::create(*c, button, b, false);
+			c2.reset(new PreStroke);
+			if (verbosity >= 2) printf("reset stroke (2)\n");
+		}
+		return Stroke::create(*c, *c2, button, b, false, multi_finger);
 	}
 
 	bool timeout() {
 		if (verbosity >= 2)
 			printf("Aborting stroke...\n");
 		trace->end();
+		trace2->end();
 		RPreStroke c = cur;
-		if (!is_gesture)
+		RPreStroke c2 = cur2;
+		if (!is_gesture) {
 			c.reset(new PreStroke);
+			c2.reset(new PreStroke);
+		}
 		RStroke s;
 		if (prefs.timeout_gestures.get() || grabber->is_click_hold(button))
-			s = Stroke::create(*c, button, 0, true);
+			s = Stroke::create(*c, *c2, button, 0, true, multi_finger);
 		parent->replace_child(AdvancedHandler::create(s, last, button, 0, cur));
 		XFlush(dpy);
 		return false;
@@ -864,7 +907,8 @@
 
 	void do_instant() {
 		PreStroke ps;
-		RStroke s = Stroke::create(ps, button, button, false);
+		PreStroke ps2;
+		RStroke s = Stroke::create(ps, ps2, button, button, false, multi_finger);
 		parent->replace_child(AdvancedHandler::create(s, orig, button, button, cur));
 	}
 
@@ -881,13 +925,95 @@
 		timeout();
 	}
 	virtual void motion(RTriple e) {
+		if (verbosity >= 2) printf("-Valuating point (%g,%g)\n",e->x,e->y);
+		if (multi_finger_tested_times < MAX_PREV_LAST + 20) {
+			if (verbosity >= 4) printf("-Multi_finger\n");
+			if (-1 || multi_finger_tested_times > MAX_PREV_LAST) {
+				if (verbosity >= 3) printf("-Valuating multi_finger (%g,%g)\n",e->x,e->y);
+				RTriple far_finger[ MAX_PREV_LAST ];
+				int far_fingers = 0;
+				for( int ndx = 0; ndx < num_prev_last; ndx++ ){
+					if (verbosity >= 4) printf("-Valuating multi_finger %d(%g,%g)\n",ndx,prev_lasts[ndx]->x,prev_lasts[ndx]->y);
+					bool far_from_all = true;
+					for( int ndx_far = 0; ndx_far < far_fingers; ndx_far++ ){
+						float far = hypot(far_finger[ndx_far]->x-prev_lasts[ndx]->x, far_finger[ndx_far]->y-prev_lasts[ndx]->y);
+						if (verbosity >= 4){
+							printf("-Valuating multi_finger %d far from prev %d(%g,%g) distance=%g\n",ndx,ndx_far,far_finger[ndx_far]->x,far_finger[ndx_far]->y,far);
+						}
+						if ( far <= min_dist_multi_finger){
+							if (verbosity >= 5) printf("-Valuating multi_finger %d far from prev is no so far to %d, distance: %g\n",ndx, ndx_far, far);
+							far_from_all = false;
+							far_finger[ndx_far] = prev_lasts[ndx];
+							break;
+						}
+					}
+					if (far_from_all) {
+						if (verbosity >= 3) printf("-Valuating multi_finger %d far from prev added to list (%g,%g) at position %d\n",ndx,prev_lasts[ndx]->x,prev_lasts[ndx]->y,far_fingers);
+						far_finger[far_fingers++] = prev_lasts[ndx];
+					}
+				}
+				multi_finger_founds[ far_fingers ]++;
+				if (verbosity >= 2) printf("-Valuating multi_finger found %d fingers, this time\n",far_fingers);
+			}
+			for( int ndx = MAX_PREV_LAST - 1; ndx >= 1; ndx-- ){
+				prev_lasts[ndx] = prev_lasts[ndx - 1];
+			}
+			prev_lasts[0] = e;
+			multi_finger_tested_times++;
+			num_prev_last = multi_finger_tested_times;
+			if (num_prev_last > MAX_PREV_LAST) {
+				num_prev_last = MAX_PREV_LAST;
+			}
+			/*
+			if (multi_finger_tested_times != 1) {
+				return;
+			}
+			*/
+		} else {
+			int ndx_multi_finger_founds;
+			int max_founds = 0;
+			for (ndx_multi_finger_founds = 0; ndx_multi_finger_founds < MAX_FINGERS; ndx_multi_finger_founds++) {
+				if (verbosity >= 4){
+					printf("-Valuating multi_finger_founds %d, for %d times\n",ndx_multi_finger_founds,multi_finger_founds[ndx_multi_finger_founds]);
+				}
+				if (multi_finger_founds[ ndx_multi_finger_founds ] > max_founds) {
+					multi_finger = ndx_multi_finger_founds;
+					max_founds = multi_finger_founds[ ndx_multi_finger_founds ];
+				}
+			}
+			if (verbosity >= 2){
+				printf("-Valuating multi_finger found %d\n",multi_finger);
+			}
+		}
+		float dist = hypot(e->x-last->x, e->y-last->y);
+		// if (multi_finger > 1 && dist > min_dist_multi_finger) {
+		if (dist > min_dist_multi_finger) {
+			if (multi_finger == 2) {
+				cur2->add(e);
+				Trace::Point p;
+				p.x = e->x;
+				p.y = e->y;
+				if (cur2->size() == 1) {
+					trace2->start(p);
+				} else {
+					trace2->draw(p);
+				}
+				if (verbosity >= 2) printf("-Valuating multi_finger added point to second finger\n");
+			} else if (multi_finger > 2) {
+				if (verbosity >= 3) printf("-Valuating multi_finger found %d fingers and this dist %g will be ignored\n",multi_finger,dist);
+			}
+			return;
+		}
+
 		cur->add(e);
-		float dist = hypot(e->x-orig->x, e->y-orig->y);
+		dist = hypot(e->x-orig->x, e->y-orig->y);
 		if (!is_gesture && dist > 16) {
+			if (verbosity >= 2) printf("Not gesture yet dist=%g\n",dist);
 			if (use_timeout && !final_timeout)
 				return abort_stroke();
 			init_connection.disconnect();
 			is_gesture = true;
+			if (verbosity >= 2) printf("Now is a gesture\n");
 		}
 		if (!drawing && dist > 4 && (!use_timeout || final_timeout)) {
 			drawing = true;
@@ -939,6 +1065,7 @@
 		RAction act = actions.get_action_list(grabber->current_class->get())->handle(s, ranking);
 		if (!IS_CLICK(act))
 			Ranking::queue_show(ranking, e);
+		//if (!multi_finger || !act) {
 		if (!act) {
 			XBell(dpy, 0);
 			return parent->replace_child(NULL);
@@ -978,6 +1105,12 @@
 		else
 			get_timeouts(prefs.timeout_profile.get(), &init_timeout, &final_timeout);
 		use_timeout = init_timeout;
+		multi_finger = 1;
+		multi_finger = 0;
+		min_dist_multi_finger = 50.0;
+		multi_finger_tested_times = 0;
+		num_prev_last = 0;
+		memset(multi_finger_founds,0,sizeof multi_finger_founds);
 	}
 	virtual void init() {
 		if (grabber->is_instant(button))
@@ -988,7 +1121,9 @@
 			final_timeout = 0;
 		}
 		cur = PreStroke::create();
+		cur2 = PreStroke::create();
 		cur->add(orig);
+		// cur2->add(orig);
 		if (!use_timeout)
 			return;
 		if (final_timeout && final_timeout < 32 && radius < 16*32/final_timeout) {
@@ -998,7 +1133,7 @@
 		init_connection = Glib::signal_timeout().connect(
 				sigc::mem_fun(*this, &StrokeHandler::timeout), init_timeout);
 	}
-	~StrokeHandler() { trace->end(); }
+	~StrokeHandler() { trace->end(); trace2->end(); }
 	virtual std::string name() { return "Stroke"; }
 	virtual Grabber::State grab_mode() { return Grabber::NONE; }
 };
@@ -1114,7 +1249,7 @@
 			printf("Reloading gesture display\n");
 		queue(sigc::mem_fun(*this, &ReloadTrace::reload));
 	}
-	void reload() { trace.reset(init_trace()); }
+	void reload() { trace.reset(init_trace()); trace2.reset(init_trace()); }
 } reload_trace;
 
 static void schedule_reload_trace() { reload_trace.set_timeout(1000); }
@@ -1194,6 +1329,7 @@
 	XUngrabPointer(dpy, CurrentTime);
 
 	trace.reset(init_trace());
+	trace2.reset(init_trace());
 	Glib::RefPtr<Gdk::Screen> screen = Gdk::Display::get_default()->get_default_screen();
 	g_signal_connect(screen->gobj(), "composited-changed", &schedule_reload_trace, NULL);
 	screen->signal_size_changed().connect(sigc::ptr_fun(&schedule_reload_trace));
@@ -1538,7 +1674,9 @@
 
 Main::~Main() {
 	trace->end();
+	trace2->end();
 	trace.reset();
+	trace2.reset();
 	delete grabber;
 	delete kit;
 	XCloseDisplay(dpy);
diff -Naur easystroke-0.5.5.1/stroke.c easystroke-0.5.5.1-3mod/stroke.c
--- easystroke-0.5.5.1/stroke.c	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/stroke.c	2011-12-06 23:05:55.000000000 +0100
@@ -37,6 +37,10 @@
 	int n;
 	int capacity;
 	struct point *p;
+	double minX;
+	double maxX;
+	double minY;
+	double maxY;
 };
 
 stroke_t *stroke_alloc(int n) {
@@ -52,6 +56,14 @@
 	assert(s->capacity > s->n);
 	s->p[s->n].x = x;
 	s->p[s->n].y = y;
+	if (s->n==0) {
+		s->minX = x; s->maxX = x; s->minY = y; s->maxY = y;
+	} else {
+		if (x < s->minX) s->minX = x;
+		if (x > s->maxX) s->maxX = x;
+		if (y < s->minY) s->minY = y;
+		if (y > s->maxY) s->maxY = y;
+	}
 	s->n++;
 }
 
@@ -64,6 +76,95 @@
 		d -= 2.0;
 	return d;
 }
+double stroke_radians_difference(double alpha, double beta) {
+	return angle_difference(alpha, beta);
+}
+
+double stroke_calc_angle(struct point *p, struct point *q) {
+	return atan2(p->y - q->y, p->x - q->x)/M_PI;
+}
+
+/* subdivide the square with 5x5 grid */
+void point_position( const struct point *p, int *grid_x, int *grid_y) {
+	*grid_x = p->x * 5.0;
+	*grid_y = p->y * 5.0;
+}
+
+#include <stdio.h>
+
+double how_compatible_points(const struct point *p1, const struct point *p2) {
+	int grid_1_x, grid_1_y, grid_2_x, grid_2_y;
+	int diff_x, diff_y;
+	double compatible = 0.0;
+	point_position( p1, &grid_1_x, &grid_1_y );
+	point_position( p2, &grid_2_x, &grid_2_y );
+	diff_x = abs(grid_1_x - grid_2_x);
+	diff_y = abs(grid_1_y - grid_2_y);
+	switch(diff_x){
+	case 0: compatible += 1.0; break;
+	case 1: compatible += 0.5; break;
+	}
+	switch(diff_y){
+	case 0: compatible += 1.0; break;
+	case 1: compatible += 0.5; break;
+	}
+/*
+printf("(%.3f[%d],%.3f[%d]) and (%.3f[%d],%.3f[%d]) = %.3f\n",
+	p1->x,grid_1_x,
+	p1->y,grid_1_y,
+	p2->x,grid_2_x,
+	p2->y,grid_2_y,
+	compatible / 2.0
+	);
+*/
+
+	return compatible / 2.0;
+}
+
+double stroke_how_compatible(const stroke_t *stroke, const stroke_t *stroke2) {
+	double compatible_start = how_compatible_points(&stroke->p[0],&stroke2->p[0]);
+	double compatible_end = how_compatible_points(&stroke->p[stroke->n - 1],&stroke2->p[stroke2->n - 1]);
+
+	return ( compatible_start + compatible_end ) / 2.0;
+}
+
+double stroke_dist_start(const stroke_t *stroke, const stroke_t *stroke2) {
+	return fabs(hypot(stroke->p[0].x - stroke2->p[0].x, stroke->p[0].y - stroke2->p[0].y));
+}
+
+double stroke_dist_middle(const stroke_t *stroke, const stroke_t *stroke2) {
+	return fabs(hypot(stroke->p[stroke->n / 2].x - stroke2->p[stroke2->n / 2].x, stroke->p[stroke->n / 2].y - stroke2->p[stroke2->n / 2].y));
+}
+
+double stroke_dist_end(const stroke_t *stroke, const stroke_t *stroke2) {
+	return fabs(hypot(stroke->p[stroke->n - 1].x - stroke2->p[stroke2->n - 1].x, stroke->p[stroke->n - 1].y - stroke2->p[stroke2->n - 1].y));
+}
+
+double stroke_orient_start(const stroke_t *stroke, const stroke_t *stroke2) {
+	return stroke_calc_angle(&stroke->p[0],&stroke2->p[0]);
+}
+
+double stroke_orient_middle(const stroke_t *stroke, const stroke_t *stroke2) {
+	return stroke_calc_angle(&stroke->p[stroke->n / 2],&stroke2->p[stroke2->n / 2]);
+}
+
+double stroke_orient_end(const stroke_t *stroke, const stroke_t *stroke2) {
+	return stroke_calc_angle(&stroke->p[stroke->n - 1],&stroke2->p[stroke2->n - 1]);
+}
+
+void stroke_normalize(stroke_t *s,stroke_t *s2) {
+	if (s && s2){
+		double minX = s->minX, minY = s->minY, maxX = s->maxX, maxY = s->maxY;
+		if (s2->minX < s->minX) minX = s2->minX;
+		if (s2->minY < s->minY) minY = s2->minY;
+		if (s2->maxX > s->maxX) maxX = s2->maxX;
+		if (s2->maxY > s->maxY) maxY = s2->maxY;
+		s->minX = s2->minX = minX;
+		s->minY = s2->minY = minY;
+		s->maxX = s2->maxX = maxX;
+		s->maxY = s2->maxY = maxY;
+	}
+}
 
 void stroke_finish(stroke_t *s) {
 	assert(s->capacity > 0);
@@ -78,6 +179,7 @@
 	}
 	for (int i = 0; i <= n; i++)
 		s->p[i].t /= total;
+/*
 	double minX = s->p[0].x, minY = s->p[0].y, maxX = minX, maxY = minY;
 	for (int i = 1; i <= n; i++) {
 		if (s->p[i].x < minX) minX = s->p[i].x;
@@ -85,18 +187,20 @@
 		if (s->p[i].y < minY) minY = s->p[i].y;
 		if (s->p[i].y > maxY) maxY = s->p[i].y;
 	}
-	double scaleX = maxX - minX;
-	double scaleY = maxY - minY;
+*/
+	double scaleX = s->maxX - s->minX;
+	double scaleY = s->maxY - s->minY;
 	double scale = (scaleX > scaleY) ? scaleX : scaleY;
 	if (scale < 0.001) scale = 1;
 	for (int i = 0; i <= n; i++) {
-		s->p[i].x = (s->p[i].x-(minX+maxX)/2)/scale + 0.5;
-		s->p[i].y = (s->p[i].y-(minY+maxY)/2)/scale + 0.5;
+		s->p[i].x = (s->p[i].x-(s->minX+s->maxX)/2)/scale + 0.5;
+		s->p[i].y = (s->p[i].y-(s->minY+s->maxY)/2)/scale + 0.5;
 	}
 
 	for (int i = 0; i < n; i++) {
 		s->p[i].dt = s->p[i+1].t - s->p[i].t;
-		s->p[i].alpha = atan2(s->p[i+1].y - s->p[i].y, s->p[i+1].x - s->p[i].x)/M_PI;
+		// s->p[i].alpha = atan2(s->p[i+1].y - s->p[i].y, s->p[i+1].x - s->p[i].x)/M_PI;
+		s->p[i].alpha = stroke_calc_angle(&s->p[i+1], &s->p[i])/M_PI;
 	}
 
 }
diff -Naur easystroke-0.5.5.1/stroke.h easystroke-0.5.5.1-3mod/stroke.h
--- easystroke-0.5.5.1/stroke.h	2011-08-16 10:11:40.000000000 +0200
+++ easystroke-0.5.5.1-3mod/stroke.h	2011-11-17 22:53:03.000000000 +0100
@@ -21,15 +21,25 @@
 #endif
 
 struct _stroke_t;
+struct point;
 
 typedef struct _stroke_t stroke_t;
 
 stroke_t *stroke_alloc(int n);
 void stroke_add_point(stroke_t *stroke, double x, double y);
+void stroke_normalize(stroke_t *stroke, stroke_t *stroke2);
 void stroke_finish(stroke_t *stroke);
 void stroke_free(stroke_t *stroke);
 
 int stroke_get_size(const stroke_t *stroke);
+double stroke_radians_difference(double alpha, double beta);
+double stroke_how_compatible(const stroke_t *stroke, const stroke_t *stroke2);
+double stroke_dist_start(const stroke_t *stroke, const stroke_t *stroke2);
+double stroke_dist_middle(const stroke_t *stroke, const stroke_t *stroke2);
+double stroke_dist_end(const stroke_t *stroke, const stroke_t *stroke2);
+double stroke_orient_start(const stroke_t *stroke, const stroke_t *stroke2);
+double stroke_orient_middle(const stroke_t *stroke, const stroke_t *stroke2);
+double stroke_orient_end(const stroke_t *stroke, const stroke_t *stroke2);
 void stroke_get_point(const stroke_t *stroke, int n, double *x, double *y);
 double stroke_get_time(const stroke_t *stroke, int n);
 double stroke_get_angle(const stroke_t *stroke, int n);
diff -Naur easystroke-0.5.5.1/win.cc easystroke-0.5.5.1-3mod/win.cc
--- easystroke-0.5.5.1/win.cc	2011-08-30 13:04:10.000000000 +0200
+++ easystroke-0.5.5.1-3mod/win.cc	2011-11-14 08:40:21.000000000 +0100
@@ -25,6 +25,8 @@
 	const Cairo::RefPtr<Cairo::Context> ctx = Cairo::Context::create (surface);
 	x += width; y += width; w -= 2*width; h -= 2*width;
 	ctx->save();
+	int same_draws = multi_finger;
+	if (same_draws < 1 || same_draws == 2) same_draws = 1;
 	ctx->translate(x,y);
 	ctx->scale(w,h);
 	ctx->set_line_width(2.0*width/(w+h));
@@ -41,6 +43,7 @@
 		z[n-1] = points(n-1) * (-sum);
 		for (int j = n-1; j > 0; j--)
 			z[j-1] = (z[j] - points(j)) * lambda;
+		for (double f = 0.0; f < (double)same_draws; f++) {
 		for (int j = 0; j < n-1; j++) {
 			// j -> j+1
 			if (inv)
@@ -50,12 +53,45 @@
 			Point p[4];
 			p[0] = points(j);
 			p[3] = points(j+1);
+			p[0].x += f / 15.0; p[0].y += f / 15.0;
+			p[3].x += f / 15.0; p[3].y += f / 15.0;
 			p[1] = p[0] + y[j] + z[j];
 			p[2] = p[3] - y[j+1] - z[j+1];
 			ctx->move_to(p[0].x, p[0].y);
 			ctx->curve_to(p[1].x, p[1].y, p[2].x, p[2].y, p[3].x, p[3].y);
+			if (verbosity >= 4) printf(" draw1 (%g,%g)\n",p[0].x,p[0].y);
 			ctx->stroke();
 		}
+		}
+		n = size2();
+		if (multi_finger == 2 && n > 0) {
+//fprintf(NULL,"prova");
+			if (verbosity >= 2) printf("draw second (size=%d)\n",n);
+			std::vector<Point> y(n);
+			y[0] = points2(0) * sum;
+			for (int j = 0; j < n-1; j++)
+				y[j+1] = (y[j] + points2(j)) * lambda;
+			std::vector<Point> z(n);
+			z[n-1] = points2(n-1) * (-sum);
+			for (int j = n-1; j > 0; j--)
+				z[j-1] = (z[j] - points2(j)) * lambda;
+			for (int j = 0; j < n-1; j++) {
+				// j -> j+1
+				if (inv)
+					ctx->set_source_rgba(time2(j), 0.0, 1.0-time2(j), 1.0);
+				else
+					ctx->set_source_rgba(0.0, time2(j), 1.0-time2(j), 1.0);
+				Point p[4];
+				p[0] = points2(j);
+				p[3] = points2(j+1);
+				p[1] = p[0] + y[j] + z[j];
+				p[2] = p[3] - y[j+1] - z[j+1];
+				ctx->move_to(p[0].x, p[0].y);
+				ctx->curve_to(p[1].x, p[1].y, p[2].x, p[2].y, p[3].x, p[3].y);
+				if (verbosity >= 4) printf(" draw2 (%g,%g)\n",p[0].x,p[0].y);
+				ctx->stroke();
+			}
+		}
 	} else if (!button) {
 		if (inv)
 			ctx->set_source_rgba(1.0, 1.0, 0.0, 1.0);
